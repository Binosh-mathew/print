import { useState, useEffect, useCallback, useRef } from "react";
import { Link } from "react-router-dom";
import UserLayout from "@/components/layouts/UserLayout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { FileText } from "lucide-react";
import OrderStatusBadge from "@/components/OrderStatusBadge";
import { fetchOrders } from "@/api";
import { type Order } from "@/types/order";
import { toast } from "@/components/ui/use-toast";
import useAuthStore from "@/store/authStore";
import { useSocket } from "@/hooks/useSocket";

// Utility function to debounce operations
function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: ReturnType<typeof setTimeout> | null = null;
  
  return function(...args: Parameters<T>) {
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}

const OrderHistory = () => {
  const { user } = useAuthStore();
  const [userOrders, setUserOrders] = useState<Order[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [hasError, setHasError] = useState(false);
  const socket = useSocket();
  const prevConnected = useRef<boolean>(socket.isConnected);
  const loadingTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const initialLoadStarted = useRef(false);
  
  // Create a debounced version of loadOrders to prevent rapid firing from socket events
  const debouncedRefresh = useRef(debounce(() => {
    console.log("Debounced refresh triggered");
    loadOrders();
  }, 800));

  // Load orders from API (using useCallback to safely include in dependency arrays)
  const loadOrders = useCallback(async () => {
    // Avoid triggering a load if we're already loading
    if (isLoading) {
      console.log("Already loading orders, skipping duplicate request");
      return;
    }
    
    console.log("Loading orders...");
    
    // Clear any existing loading guard timer
    if (loadingTimerRef.current) {
      clearTimeout(loadingTimerRef.current);
      loadingTimerRef.current = null;
    }
    
    // Set a guard timeout to ensure loading state is eventually reset
    // even if something goes wrong with the API call or response handling
    loadingTimerRef.current = setTimeout(() => {
      console.log("Loading guard timeout triggered - forcing loading state to false");
      setIsLoading(false);
    }, 15000); // 15 seconds max loading time
    
    setIsLoading(true);
    setHasError(false);
    
    try {
      const data = await fetchOrders();

      if (user) {
        // The backend already filters orders for the current user based on the auth token
        // Just ensure we have an array to work with
        const userOrdersList: Order[] = Array.isArray(data) ? data : [];

        // Sort orders by creation date (newest first)
        const sortedOrders = userOrdersList.sort(
          (a, b) =>
            new Date(b.createdAt || "").getTime() -
            new Date(a.createdAt || "").getTime()
        );

        console.log(`Loaded ${sortedOrders.length} orders successfully`);
        setUserOrders(sortedOrders);
      } else {
        console.log("No user available, not setting orders");
        setUserOrders([]);
      }
    } catch (error) {
      console.error("Error fetching orders:", error);
      setHasError(true);
      toast({
        title: "Couldn't load orders",
        description:
          "There was a problem connecting to the server. Please try again later.",
        variant: "destructive",
      });
    } finally {
      console.log("Finished loading orders, setting loading state to false");
      setIsLoading(false);
      
      // Clear the guard timeout since we're done loading
      if (loadingTimerRef.current) {
        clearTimeout(loadingTimerRef.current);
        loadingTimerRef.current = null;
      }
    }
  }, [user, toast, isLoading]);

  // Socket event handlers defined as stable references with useCallback
  const handleNewOrder = useCallback((newOrder: Order) => {
    console.log("New order received:", newOrder);
    setUserOrders(prevOrders => [newOrder, ...prevOrders].sort(
      (a, b) => new Date(b.createdAt || "").getTime() - new Date(a.createdAt || "").getTime()
    ));
    
    toast({
      title: "New Order",
      description: `Your order for ${newOrder.documentName || 'document'} has been created.`,
    });
  }, [toast]);

  const handleOrderUpdate = useCallback((updatedOrder: Order) => {
    console.log("Order updated:", updatedOrder);
    setUserOrders(prevOrders => prevOrders.map(
      order => (order._id === updatedOrder._id || order.id === updatedOrder.id) 
        ? updatedOrder 
        : order
    ));
    
    toast({
      title: "Order Updated",
      description: `Your order status has changed to ${updatedOrder.status}.`,
    });
  }, [toast]);

  const handleOrderDelete = useCallback((orderId: string) => {
    console.log("Order deleted:", orderId);
    setUserOrders(prevOrders => prevOrders.filter(
      order => order._id !== orderId && order.id !== orderId
    ));
    
    toast({
      title: "Order Removed",
      description: "An order has been removed from your history.",
      variant: "destructive"
    });
  }, [toast]);

  const handleOrdersUpdate = useCallback(() => {
    console.log("Orders updated globally, refreshing");
    debouncedRefresh.current();
  }, []);

  // Initial fetch and real-time updates
  useEffect(() => {
    // Set a flag for component mounted state to prevent state updates after unmount
    let isMounted = true;
    
    // Define an async function to load orders safely
    const fetchInitialOrders = async () => {
      // Prevent duplicate initial loads (React 18 StrictMode might cause double effects)
      if (initialLoadStarted.current) {
        console.log("Initial load already started, skipping duplicate");
        return;
      }
      
      initialLoadStarted.current = true;
      console.log("Initial load: fetching orders...");
      
      try {
        await loadOrders();
        // No need to set isLoading to false here as loadOrders already does it
      } catch (error) {
        console.error("Error in initial order fetch:", error);
        // Make sure loading state is resolved even on error
        if (isMounted) setIsLoading(false);
      }
    };
    
    // Execute the initial fetch only once
    fetchInitialOrders();
    
    // Only set up socket events if we have a user ID
    if (!user?.id) {
      console.log("No user ID available, skipping socket setup");
      return () => { isMounted = false; };
    }
    
    console.log(`Setting up real-time updates for user: ${user.id}`);
    
    // Register event handlers for order updates using stable callbacks
    socket.registerEventHandlers({
      onNewOrder: (newOrder) => {
        if (!isMounted) return;
        handleNewOrder(newOrder);
      },
      onOrderUpdated: (updatedOrder) => {
        if (!isMounted) return;
        handleOrderUpdate(updatedOrder);
      },
      onOrderDeleted: (orderId) => {
        if (!isMounted) return;
        handleOrderDelete(orderId);
      },
      onOrdersUpdated: () => {
        if (!isMounted) return;
        handleOrdersUpdate();
      }
    });
    
    return () => {
      // Clean up event handlers when component unmounts
      console.log("Cleaning up socket event handlers");
      isMounted = false;
      socket.registerEventHandlers({});
      
      // Clear any loading timers
      if (loadingTimerRef.current) {
        clearTimeout(loadingTimerRef.current);
        loadingTimerRef.current = null;
      }
    };
  }, [user?.id, socket, loadOrders, toast, handleNewOrder, handleOrderUpdate, handleOrderDelete, handleOrdersUpdate]);

  // Connection status indicator
  useEffect(() => {
    // Only show warnings if we're not connected and have an error
    if (!socket.isConnected && socket.lastError) {
      console.warn("Socket connection issue:", socket.lastError);
      
      // Don't spam toast messages - only show when an error is first detected
      if (socket.lastError !== "Connection error: xhr poll error") {
        toast({
          title: "Connection Issue",
          description: "Live updates may be unavailable. Orders will still be processed.",
          variant: "destructive",
          duration: 5000,
        });
      }
    }
    
    // If we reconnect, show a success message
    if (socket.isConnected && prevConnected.current === false) {
      console.log("Socket reconnected");
      toast({
        title: "Connected",
        description: "Live updates are now active.",
        duration: 3000,
      });
    }
    
    // Track connection state changes
    prevConnected.current = socket.isConnected;
  }, [socket.isConnected, socket.lastError, toast]);

  // Function to get special paper info from files
  const getPaperAndBindingInfo = (order: Order) => {
    if (!order.files || order.files.length === 0)
      return { paper: "Normal A4", binding: "None" };

    const specialPapers = order.files
      .filter((file) => file.specialPaper !== "none")
      .map((file) => file.specialPaper);

    const bindingTypes = order.files
      .filter((file) => file.binding.needed && file.binding.type !== "none")
      .map((file) => file.binding.type);

    return {
      paper: specialPapers.length > 0 ? specialPapers.join(", ") : "Normal A4",
      binding:
        bindingTypes.length > 0
          ? bindingTypes.map((type) => type.replace("Binding", "")).join(", ")
          : "None",
    };
  };

  // Make sure user is in the correct user room for socket updates
  useEffect(() => {
    if (user?.id && socket.isConnected) {
      // Join user room to ensure we get updates for this specific user
      console.log(`Ensuring user is in room for user ID: ${user.id}`);
      
      // Socket join room if applicable (depends on your backend implementation)
      // You may not need this if the backend automatically adds users to rooms based on auth
      
      // Try reconnecting if there were connection issues
      if (socket.lastError) {
        console.log("Connection had errors, attempting to reconnect");
        socket.reconnect();
      }
    }
  }, [user?.id, socket.isConnected, socket.lastError, socket]);
  
  return (
    <UserLayout>
      <div className="space-y-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold">Order History</h1>
            <p className="text-gray-600 mt-1">
              View and track your print orders
            </p>
          </div>
          <div className="flex items-center gap-2">
            {/* Socket connection indicator */}
            <div className="flex items-center mr-2 text-xs text-gray-600 gap-1">
              <div className={`w-2 h-2 rounded-full ${socket.isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`} />
              <span>{socket.isConnected ? 'Live updates on' : 'Offline'}</span>
            </div>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => loadOrders()}
              disabled={isLoading}
              className="mr-2"
            >
              {isLoading ? 'Loading...' : 'Refresh'}
            </Button>
            <Link to="/new-order">
              <Button className="bg-primary hover:bg-primary-500">
                New Order
              </Button>
            </Link>
          </div>
        </div>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle>Your Orders</CardTitle>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="py-8 text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary mx-auto"></div>
                <p className="text-gray-500 mt-4">Loading your orders...</p>
              </div>
            ) : hasError ? (
              <div className="text-center py-8">
                <div className="text-red-500 mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                </div>
                <p className="text-gray-700 font-medium mb-2">Failed to load orders</p>
                <p className="text-gray-500 mb-4">There was a problem connecting to the server.</p>
                <Button 
                  onClick={() => loadOrders()}
                  className="mt-2"
                >
                  Try Again
                </Button>
              </div>
            ) : userOrders.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="border-b border-gray-200">
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">
                        Order ID
                      </th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">
                        Document
                      </th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">
                        Date
                      </th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">
                        Copies
                      </th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">
                        Paper
                      </th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">
                        Type
                      </th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">
                        Price
                      </th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">
                        Status
                      </th>
                      <th className="text-right py-3 px-4 text-sm font-medium text-gray-500">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {userOrders.map((order) => {
                      const { paper } = getPaperAndBindingInfo(order);
                      return (
                        <tr
                          key={order._id || order.id}
                          className="border-b border-gray-200 hover:bg-gray-50"
                        >
                          <td className="py-3 px-4 text-sm text-gray-600">
                            #{order.orderId}
                          </td>
                          <td className="py-3 px-4">
                            <div className="flex items-center">
                              <FileText
                                size={16}
                                className="text-gray-400 mr-2"
                              />
                              <span className="text-sm font-medium text-gray-700 truncate max-w-[150px]">
                                {order.documentName || order.customerName}
                              </span>
                            </div>
                          </td>
                          <td className="py-3 px-4 text-sm text-gray-600">
                            {new Date(
                              order.orderDate || order.createdAt || ""
                            ).toLocaleDateString()}
                          </td>
                          <td className="py-3 px-4 text-sm text-gray-600">
                            {order.copies || 1}
                          </td>
                          <td className="py-3 px-4 text-sm text-gray-600">
                            {paper}
                          </td>
                          <td className="py-3 px-4 text-sm text-gray-600">
                            {order.colorType === "color" ? "Color" : "B&W"}
                            {order.doubleSided ? ", Double-sided" : ""}
                          </td>
                          <td className="py-3 px-4 text-sm font-medium">
                            ₹{order.totalPrice || 0}
                          </td>
                          <td className="py-3 px-4">
                            <OrderStatusBadge status={order.status} />
                          </td>
                          <td className="py-3 px-4 text-right">
                            <div className="flex items-center justify-end gap-2">
                              <Link to={`/orders/${order._id || order.id}`}>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="text-primary h-8"
                                >
                                  View
                                </Button>
                              </Link>
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="text-center py-8">
                <FileText className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500 mb-2">No orders found</p>
                <p className="text-gray-400 text-sm mb-4">Your order history will appear here after you create an order.</p>
                <Link to="/new-order">
                  <Button className="mt-4 bg-primary hover:bg-primary-500">
                    Create your first order
                  </Button>
                </Link>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </UserLayout>
  );
};

export default OrderHistory;
